package org.geomatics.gv;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Objects;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import org.geomatics.geom.Rect;
import org.geomatics.gfx.fill.ColorFill;
import org.geomatics.gfx.fill.Fill;
import org.geomatics.gfx.outline.BasicOutline;
import org.geomatics.gfx.outline.Outline;
import org.geomatics.gfx.renderable.Renderable;
import org.geomatics.gfx.renderable.RenderableOutline;
import org.geomatics.gv.model.LayerModel;

/**
 *
 * @author tofarrell
 */
public class StylePanel extends javax.swing.JPanel {

    public static final String MODEL = "model";
    private enum ColorMode{
        FILL,
        LINE,
        SYMBOL
    }
    private LayerModel model;
    private Border validBorder;
    private JColorChooser colorChooser;
    private JDialog colorChooserDialog;
    private ColorMode colorMode;

    public StylePanel() {
        initComponents();
        validBorder = lineWidth.getBorder();
        colorChooser = new JColorChooser();
        colorChooserDialog = JColorChooser.createDialog(this, "Select Color", true, colorChooser, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                Color color = colorChooser.getColor();
                if(color == null){
                    return;
                }
                long c = (((long)color.getAlpha()) << 24) | color.getRGB();
                Fill fill = new ColorFill(c);
                switch(colorMode){
                    case FILL:
                        setModel(new LayerModel(model.title, model.geom, fill, model.outlineFill, model.outline, model.symbol));
                        return;
                    case LINE:
                        setModel(new LayerModel(model.title, model.geom, model.fill, fill, model.outline, model.symbol));
                        return;
                    case SYMBOL:
                        Renderable symbol = new RenderableOutline(0, Rect.valueOf(-5, -5, 5, 5), fill, new BasicOutline(1));
                        setModel(new LayerModel(model.title, model.geom, model.fill, model.outlineFill, model.outline, symbol));
                        return;
                }
            }
        }, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                //no action required
            }
        
        });
    }

    public LayerModel getModel() {
        return model;
    }

    public void setModel(LayerModel model) {
        if(Objects.equals(this.model, model)){
            return;
        }
        if((model.outline instanceof BasicOutline) && (model.outlineFill instanceof ColorFill)){
            lineEnable.setSelected(true);
            lineWidth.setEnabled(true);
            lineWidth.setText(Float.toString(((BasicOutline)model.outline).getWidth()));
            lineColorBtn.setEnabled(true);
        }else{
            lineEnable.setSelected(false);
            lineColorBtn.setEnabled(false);
            lineWidth.setEnabled(false);
            lineColorBtn.setEnabled(false);
        }
        if(model.fill instanceof ColorFill){
            fillEnable.setSelected(true);
            fillColorBtn.setEnabled(true);
        }else{
            fillEnable.setSelected(false);
            fillColorBtn.setEnabled(false);
        }
        if((model.symbol instanceof RenderableOutline) && (((RenderableOutline)model.symbol).getFill() instanceof ColorFill)){
            pointSymbolEnable.setSelected(true);
            pointSymbolColorBtn.setEnabled(true);
        }else{
            pointSymbolEnable.setSelected(false);
            pointSymbolColorBtn.setEnabled(false);
        }
        firePropertyChange(MODEL, this.model, this.model = model);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel linePanel = new javax.swing.JPanel();
        lineEnable = new javax.swing.JCheckBox();
        lineColorBtn = new javax.swing.JButton();
        llineWidthLabel = new javax.swing.JLabel();
        lineWidth = new javax.swing.JTextField();
        javax.swing.JPanel fillPanel = new javax.swing.JPanel();
        fillEnable = new javax.swing.JCheckBox();
        fillColorBtn = new javax.swing.JButton();
        javax.swing.JPanel pointSymbolPanel = new javax.swing.JPanel();
        pointSymbolEnable = new javax.swing.JCheckBox();
        pointSymbolColorBtn = new javax.swing.JButton();

        linePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Lines"));

        lineEnable.setText("Draw Lines");
        lineEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineEnableActionPerformed(evt);
            }
        });

        lineColorBtn.setText("Set Color");
        lineColorBtn.setMaximumSize(new java.awt.Dimension(80, 23));
        lineColorBtn.setMinimumSize(new java.awt.Dimension(80, 23));
        lineColorBtn.setPreferredSize(new java.awt.Dimension(80, 23));
        lineColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineColorBtnActionPerformed(evt);
            }
        });

        llineWidthLabel.setLabelFor(lineWidth);
        llineWidthLabel.setText("Line Width");

        lineWidth.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        lineWidth.setText("1");
        lineWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lineWidthFocusLost(evt);
            }
        });
        lineWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lineWidthKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout linePanelLayout = new javax.swing.GroupLayout(linePanel);
        linePanel.setLayout(linePanelLayout);
        linePanelLayout.setHorizontalGroup(
            linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, linePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lineEnable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(llineWidthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lineWidth)
                    .addComponent(lineColorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        linePanelLayout.setVerticalGroup(
            linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linePanelLayout.createSequentialGroup()
                .addGroup(linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineEnable)
                    .addComponent(lineColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(llineWidthLabel)))
        );

        fillPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color Fill"));

        fillEnable.setText("Fill Shapes");
        fillEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillEnableActionPerformed(evt);
            }
        });

        fillColorBtn.setText("Set Color");
        fillColorBtn.setMaximumSize(new java.awt.Dimension(80, 23));
        fillColorBtn.setMinimumSize(new java.awt.Dimension(80, 23));
        fillColorBtn.setPreferredSize(new java.awt.Dimension(80, 23));
        fillColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillColorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fillPanelLayout = new javax.swing.GroupLayout(fillPanel);
        fillPanel.setLayout(fillPanelLayout);
        fillPanelLayout.setHorizontalGroup(
            fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fillEnable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(fillColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        fillPanelLayout.setVerticalGroup(
            fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(fillEnable)
                .addComponent(fillColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pointSymbolPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Point Symbol"));

        pointSymbolEnable.setText("Draw Symbols");
        pointSymbolEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointSymbolEnableActionPerformed(evt);
            }
        });

        pointSymbolColorBtn.setText("Set Color");
        pointSymbolColorBtn.setMaximumSize(new java.awt.Dimension(80, 23));
        pointSymbolColorBtn.setMinimumSize(new java.awt.Dimension(80, 23));
        pointSymbolColorBtn.setPreferredSize(new java.awt.Dimension(80, 23));
        pointSymbolColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointSymbolColorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pointSymbolPanelLayout = new javax.swing.GroupLayout(pointSymbolPanel);
        pointSymbolPanel.setLayout(pointSymbolPanelLayout);
        pointSymbolPanelLayout.setHorizontalGroup(
            pointSymbolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointSymbolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pointSymbolEnable, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(pointSymbolColorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addContainerGap())
        );
        pointSymbolPanelLayout.setVerticalGroup(
            pointSymbolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointSymbolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(pointSymbolEnable)
                .addComponent(pointSymbolColorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(linePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fillPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pointSymbolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(linePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fillPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pointSymbolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lineColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineColorBtnActionPerformed
        colorMode = ColorMode.LINE;
        colorChooserDialog.setVisible(true);
    }//GEN-LAST:event_lineColorBtnActionPerformed

    private void fillColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillColorBtnActionPerformed
        colorMode = ColorMode.FILL;
        colorChooserDialog.setVisible(true);
    }//GEN-LAST:event_fillColorBtnActionPerformed

    private void pointSymbolColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointSymbolColorBtnActionPerformed
        colorMode = ColorMode.SYMBOL;
        colorChooserDialog.setVisible(true);
    }//GEN-LAST:event_pointSymbolColorBtnActionPerformed

    private void lineEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineEnableActionPerformed
        boolean enabled = lineEnable.isSelected();
        lineColorBtn.setEnabled(enabled);
        lineWidth.setEnabled(enabled);
        Fill outlineFill;
        Outline outline;
        if(enabled){
            float width;
            try{
                width = Float.parseFloat(lineWidth.getText());
            }catch(Exception ex){
                width = 1;
                lineWidth.setText("1");
            }
            outline = new BasicOutline(width);
            outlineFill = new ColorFill(0xFF000000);
        }else{
            outlineFill = null;
            outline = null;
        }
        setModel(new LayerModel(model.title, model.geom, model.fill, outlineFill, outline, model.symbol));
    }//GEN-LAST:event_lineEnableActionPerformed

    private void fillEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillEnableActionPerformed
        boolean enabled = fillEnable.isSelected();
        fillColorBtn.setEnabled(enabled);
        Fill fill;
        if(enabled){
            fill = new ColorFill(0x80FFCC00);
        }else{
            fill = null;
        }
        setModel(new LayerModel(model.title, model.geom, fill, model.outlineFill, model.outline, model.symbol));
    }//GEN-LAST:event_fillEnableActionPerformed

    private void pointSymbolEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointSymbolEnableActionPerformed
        boolean enabled = pointSymbolEnable.isSelected();
        pointSymbolColorBtn.setEnabled(enabled);
        Renderable symbol;
        if(enabled){
            symbol = new RenderableOutline(0, Rect.valueOf(-5, -5, 5, 5), new ColorFill(0xFFFF0000), new BasicOutline(1));
        }else{
            symbol = null;
        }
        setModel(new LayerModel(model.title, model.geom, model.fill, model.outlineFill, model.outline, symbol));
    }//GEN-LAST:event_pointSymbolEnableActionPerformed

    private void lineWidthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineWidthKeyTyped
        float width;
        try{
            width = Float.parseFloat(lineWidth.getText());
            if(Float.isInfinite(width) || Float.isNaN(width) || (width <= 0)){
                throw new Exception();
            }
            lineWidth.setBorder(validBorder);
        }catch(Exception ex){ // auto fix if wrong
            lineWidth.setBorder(new LineBorder(Color.RED));
        }
    }//GEN-LAST:event_lineWidthKeyTyped

    private void lineWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lineWidthFocusLost
        float width;
        try{
            width = Float.parseFloat(lineWidth.getText());
            if(Float.isInfinite(width) || Float.isNaN(width) || (width <= 0)){
                throw new Exception();
            }
        }catch(Exception ex){ // auto fix if wrong
            width = 1;
            lineWidth.setText("1");
            lineWidth.setBorder(validBorder);
        }
        setModel(new LayerModel(model.title, model.geom, model.fill, model.outlineFill, model.outline, model.symbol));
    }//GEN-LAST:event_lineWidthFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fillColorBtn;
    private javax.swing.JCheckBox fillEnable;
    private javax.swing.JButton lineColorBtn;
    private javax.swing.JCheckBox lineEnable;
    private javax.swing.JTextField lineWidth;
    private javax.swing.JLabel llineWidthLabel;
    private javax.swing.JButton pointSymbolColorBtn;
    private javax.swing.JCheckBox pointSymbolEnable;
    // End of variables declaration//GEN-END:variables
}
