package org.jg.geom;

import org.jg.util.Tolerance;
import org.jg.util.VectList;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author tofarrell
 */
public class NetworkTest {
  
    @Test
    public void testExplicitIntersection_Loop(){
        Network network = new Network();
        network.addAllLinks(new VectList(0,15, 65,15, 65,65, 15,65, 15,0, 25,0, 25,55, 55,55, 55,25, 0,25, 0,15));
        
        network.explicitIntersections(Tolerance.DEFAULT);
        assertEquals("[[15,15, 0,15, 0,25, 15,25],[15,15, 15,0, 25,0, 25,15],[15,15, 15,25],[15,15, 25,15],[15,25, 15,65, 65,65, 65,15, 25,15],[15,25, 25,25],[25,15, 25,25],[25,25, 25,55, 55,55, 55,25, 25,25]]", network.toString());
    }
     
    @Test
    public void testExplicitIntersection_SawTeeth(){
        Network network = new Network();
        network.addAllLinks(new VectList(0, 50, 50, 100, 50, 0, 150, 100, 150, 0, 250, 100, 250, 0, 350, 100, 350, 0, 450, 100, 450, 50, 0, 50));
        network.explicitIntersections(Tolerance.DEFAULT);
        assertEquals("[[50,50, 0,50, 50,100, 50,50],[50,50, 50,0, 100,50],[50,50, 100,50],[100,50, 150,50],[100,50, 150,100, 150,50],[150,50, 150,0, 200,50],[150,50, 200,50],[200,50, 250,50],[200,50, 250,100, 250,50],[250,50, 250,0, 300,50],[250,50, 300,50],[300,50, 350,50],[300,50, 350,100, 350,50],[350,50, 350,0, 400,50],[350,50, 400,50],[400,50, 450,50, 450,100, 400,50]]", network.toString());
    }
    
    @Test
    public void testQuad(){
        assertEquals(0, Network.quad(0, -5));
        assertEquals(0, Network.quad(5, -5));
        assertEquals(1, Network.quad(5, 0));
        assertEquals(1, Network.quad(5, 5));
        assertEquals(1, Network.quad(0, 5));
        assertEquals(2, Network.quad(-5, 5));
        assertEquals(3, Network.quad(-5, 0));
        assertEquals(3, Network.quad(-5, -5));
    } 
    
    @Test
    public void testCompare(){
        assertEquals(-1, Network.compare(0, -5, 5, -5));
        assertEquals(-1, Network.compare(5, -5, 5, 0));
        assertEquals(-1, Network.compare(5, 0, 5, 5));
        assertEquals(-1, Network.compare(5, 5, 0, 5));
        assertEquals(-1, Network.compare(0, 5, -5, 5));
        assertEquals(-1, Network.compare(-5, 5, -5, 0));
        assertEquals(-1, Network.compare(-5, 0, -5, -5));
        
        assertEquals(1, Network.compare(5, -5, 0, -5));
        assertEquals(1, Network.compare(5, 0, 5, -5));
        assertEquals(1, Network.compare(5, 5, 5, 0));
        assertEquals(1, Network.compare(0, 5, 5, 5));
        assertEquals(1, Network.compare(-5, 5, 0, 5));
        assertEquals(1, Network.compare(-5, 0, -5, 5));
        assertEquals(1, Network.compare(-5, -5, -5, 0));
    }
    
    @Test
    public void testAddLink(){
        Network network = new Network();
        
        network.addLink(5, 5, 10, 5);
        network.addLink(5, 5, 0, 7);
        network.addLink(5, 5, 5, 0);
        network.addLink(5, 5, 10, 5);
        network.addLink(5, 5, 0, 3);
        network.addLink(5, 5, 10, 0);
        network.addLink(5, 5, 0, 10);
        network.addLink(5, 5, 0, 5);
        network.addLink(5, 5, 3, 0);
        network.addLink(5, 5, 0, 0);
        network.addLink(5, 5, 3, 10);
        network.addLink(5, 5, 10, 7);
        network.addLink(5, 5, 5, 10);
        network.addLink(5, 5, 10, 10);
        network.addLink(5, 5, 7, 0);
        network.addLink(5, 5, 10, 3);
        network.addLink(5, 5, 7, 10);
        
        VectList target = new VectList();
        network.getLinks(5, 5, target);
        assertEquals("[5,0, 7,0, 10,0, 10,3, 10,5, 10,7, 10,10, 7,10, 5,10, 3,10, 0,10, 0,7, 0,5, 0,3, 0,0, 3,0]", target.toString());
//        String wkt = "MULTILINESTRING"+network.toString().replace(",", " ").replace("  ", ", ").replace("[", "(").replace("]",")").replace(") (", "),(");
//        System.out.println(wkt);
    }
    
//    @Test
//    public void testClone(){
//        Network network = new Network();
//        network.addAllLinks(new VectList(15,7.22452362111074, 14.648598665032997,7.737215717516575, 14.291839343573354,8.516781881847683, 14.073500061801827,9.345834700462849, 14,10.2, 14.073500061801827,11.054165299537148, 14.291839343573354,11.883218118152314, 14.648598665032996,12.66278428248342, 15,13.17547637888926));
//        network.addAllLinks(new VectList(15,7.22452362111074, 15,0, 15.096073597983846,-0.9754516100806412, 15.380602337443566,-1.9134171618254485, 15.842651938487272,-2.777851165098011, 16.464466094067262,-3.5355339059327373, 17.22214883490199,-4.157348061512726, 18.08658283817455,-4.619397662556434, 19.024548389919357,-4.903926402016153, 20,-5, 20.975451610080643,-4.903926402016153, 21.91341716182545,-4.619397662556434, 22.77785116509801,-4.157348061512726, 23.535533905932738,-3.5355339059327373, 24.157348061512728,-2.77785116509801, 24.619397662556434,-1.9134171618254485, 24.903926402016154,-0.9754516100806407, 25,0, 25,10, 24.982790201886765,10.199999999999996));
//        network.addAllLinks(new VectList(15,7.22452362111074, 15,10, 19.019419324309084,5.097096621545399, 18.019419324309084,5.297096621545398, 17.196255885790197,5.536684959124731, 16.426122568818958,5.913374874186351, 15.731661311952568,6.416091673915396, 15.13328929331049,7.030055471972307, 15,7.22452362111074));
//        network.addAllLinks(new VectList(15,13.17547637888926, 15,10.4, 19.019419324309077,15.3029033784546));
//        network.addAllLinks(new VectList(15,13.17547637888926, 15,30, 15.096073597983846,30.975451610080643, 15.380602337443566,31.91341716182545, 15.842651938487274,32.777851165098014, 16.464466094067262,33.53553390593274, 17.22214883490199,34.15734806151273, 18.08658283817455,34.61939766255644, 19.02454838991936,34.903926402016154, 20,35, 20.97545161008064,34.903926402016154, 21.91341716182545,34.61939766255644, 22.77785116509801,34.15734806151273, 23.535533905932738,33.53553390593274, 24.157348061512728,32.777851165098014, 24.619397662556434,31.91341716182545, 24.903926402016154,30.97545161008064, 25,30, 25,10.4, 24.982790201886765,10.199999999999996));
//        network.addAllLinks(new VectList(15,13.17547637888926, 15.133289293310487,13.369944528027688, 15.731661311952562,13.983908326084599, 16.426122568818954,14.486625125813646, 17.196255885790194,14.863315040875266));
//        network.addAllLinks(new VectList(18.019419324309077,15.102903378454599));
//        network.addAllLinks(new VectList(19.980580675690916,15.1029033784546, 19.980580675690923,5.2970966215454, 20.980580675690923,5.497096621545401, 21.803744114209806,5.736684959124734, 22.573877431181046,6.113374874186355, 23.26833868804744,6.616091673915401, 23.866710706689513,7.230055471972311, 24.351401334967004,7.93721571751658, 24.708160656426646,8.716781881847687, 24.926499938198177,9.545834700462851, 24.982790201886765,10.199999999999996));
//        network.addAllLinks(new VectList(20.980580675690916,14.902903378454601, 21.803744114209803,14.663315040875268, 22.573877431181042,14.286625125813648, 23.268338688047432,13.783908326084603, 23.86671070668951,13.169944528027692, 24.351401334967,12.462784282483424, 24.708160656426646,11.683218118152316, 24.926499938198173,10.85416529953715, 24.982790201886765,10.199999999999996));
//        String str = network.clone().toString();
//        String expected = "[[15,7.22452362111074, 14.648598665032997,7.737215717516575, 14.291839343573354,8.516781881847683, 14.073500061801827,9.345834700462849, 14,10.2, 14.073500061801827,11.054165299537148, 14.291839343573354,11.883218118152314, 14.648598665032996,12.66278428248342, 15,13.17547637888926],[15,7.22452362111074, 15,0, 15.096073597983846,-0.9754516100806412, 15.380602337443566,-1.9134171618254485, 15.842651938487272,-2.777851165098011, 16.464466094067262,-3.5355339059327373, 17.22214883490199,-4.157348061512726, 18.08658283817455,-4.619397662556434, 19.024548389919357,-4.903926402016153, 20,-5, 20.975451610080643,-4.903926402016153, 21.91341716182545,-4.619397662556434, 22.77785116509801,-4.157348061512726, 23.535533905932738,-3.5355339059327373, 24.157348061512728,-2.77785116509801, 24.619397662556434,-1.9134171618254485, 24.903926402016154,-0.9754516100806407, 25,0, 25,10, 24.982790201886765,10.199999999999996],[15,7.22452362111074, 15,10, 19.019419324309084,5.097096621545399, 18.019419324309084,5.297096621545398, 17.196255885790197,5.536684959124731, 16.426122568818958,5.913374874186351, 15.731661311952568,6.416091673915396, 15.13328929331049,7.030055471972307, 15,7.22452362111074],[15,13.17547637888926, 15,10.4, 19.019419324309077,15.3029033784546],[15,13.17547637888926, 15,30, 15.096073597983846,30.975451610080643, 15.380602337443566,31.91341716182545, 15.842651938487274,32.777851165098014, 16.464466094067262,33.53553390593274, 17.22214883490199,34.15734806151273, 18.08658283817455,34.61939766255644, 19.02454838991936,34.903926402016154, 20,35, 20.97545161008064,34.903926402016154, 21.91341716182545,34.61939766255644, 22.77785116509801,34.15734806151273, 23.535533905932738,33.53553390593274, 24.157348061512728,32.777851165098014, 24.619397662556434,31.91341716182545, 24.903926402016154,30.97545161008064, 25,30, 25,10.4, 24.982790201886765,10.199999999999996],[15,13.17547637888926, 15.133289293310487,13.369944528027688, 15.731661311952562,13.983908326084599, 16.426122568818954,14.486625125813646, 17.196255885790194,14.863315040875266],[18.019419324309077,15.102903378454599],[19.980580675690916,15.1029033784546, 19.980580675690923,5.2970966215454, 20.980580675690923,5.497096621545401, 21.803744114209806,5.736684959124734, 22.573877431181046,6.113374874186355, 23.26833868804744,6.616091673915401, 23.866710706689513,7.230055471972311, 24.351401334967004,7.93721571751658, 24.708160656426646,8.716781881847687, 24.926499938198177,9.545834700462851, 24.982790201886765,10.199999999999996],[20.980580675690916,14.902903378454601, 21.803744114209803,14.663315040875268, 22.573877431181042,14.286625125813648, 23.268338688047432,13.783908326084603, 23.86671070668951,13.169944528027692, 24.351401334967,12.462784282483424, 24.708160656426646,11.683218118152316, 24.926499938198173,10.85416529953715, 24.982790201886765,10.199999999999996]]";
//        assertEquals(expected, str);
//    }
}
