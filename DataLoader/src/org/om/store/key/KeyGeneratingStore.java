package org.om.store.key;

import java.util.ArrayList;
import java.util.List;
import org.om.attr.Attr;
import org.om.attr.AttrSet;
import org.om.criteria.Criteria;
import org.om.element.ObjElement;
import org.om.sort.Sorter;
import org.om.store.Capabilities;
import org.om.store.ElementProcessor;
import org.om.store.ElementStore;
import org.om.store.StoreException;

/**
 *
 * @author tofar
 */
public class KeyGeneratingStore implements ElementStore {

    private final ElementStore store;
    private final String keyAttr;
    private final KeyGenerator generator;
    private final AttrSet attrs;

    public KeyGeneratingStore(ElementStore store, String keyAttr, KeyGenerator generator) {
        if(store == null){
            throw new NullPointerException("Store must not be null!");
        }
        AttrSet storeAttrs = store.getAttrs();
        Integer index = storeAttrs.indexOf(keyAttr);
        if(index == null){
            throw new IllegalArgumentException("Unknown attribute : " + keyAttr);
        }
        Attr attr = storeAttrs.byIndex(index);
        if(attr.isGenerated()){
            throw new IllegalArgumentException("Attribute "+keyAttr+" is already generated by existing store!");
        }
        if(attr.getType() != generator.getType()){
            throw new IllegalArgumentException("Attribute "+keyAttr+" has type "+attr.getType()+" but generator creates "+generator.getType());
        }
        attr = new Attr(attr.getName(), attr.getType(), attr.getTitle(), attr.getDescription(), attr.getCriteria(), attr.getDefaultValue(), true);
        List<Attr> attrs = new ArrayList<>(storeAttrs.getAttrs());
        attrs.set(index, attr);
        this.store = store;
        this.keyAttr = keyAttr;
        this.generator = generator;
        this.attrs = new AttrSet(attrs);
    }

    public ElementStore getStore() {
        return store;
    }

    public String getKeyAttr() {
        return keyAttr;
    }

    public KeyGenerator getGenerator() {
        return generator;
    }
    
    @Override
    public Capabilities getCapabilities() {
        return store.getCapabilities();
    }

    @Override
    public AttrSet getAttrs() {
        return attrs;
    }

    @Override
    public boolean load(List<String> attrs, Criteria criteria, Sorter sorter, ElementProcessor processor) throws StoreException {
        return store.load(attrs, criteria, sorter, processor);
    }

    @Override
    public long count(Criteria criteria) throws StoreException {
        return store.count(criteria);
    }

    @Override
    public ObjElement create(ObjElement element) throws StoreException {
        element = element.putElement(keyAttr, generator.createKey());
        return store.create(element);
    }

    @Override
    public long update(Criteria criteria, ObjElement element) throws StoreException {
        if(element.containsKey(keyAttr)){
            throw new StoreException("Updating key attribute ('" + keyAttr + "') is not supported");
        }
        return store.update(criteria, element);
    }

    @Override
    public long remove(Criteria criteria) throws StoreException {
        return store.remove(criteria);
    }

    @Override
    public void createAll(List<ObjElement> elements) throws StoreException {
        for(int i = 0; i < elements.size(); i++){
            elements.set(i, elements.get(i).putElement(keyAttr, generator.createKey()));
        }
        store.createAll(elements);
    }

}
